// Generated by CoffeeScript 1.6.3
(function() {
  var HUD, HUDProgressBar, HUDShipOverlay,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.SpaceDom || (window.SpaceDom = {});

  window.SpaceDom.HUD = HUD = (function(_super) {
    __extends(HUD, _super);

    function HUD(game) {
      this.game = game;
      this.initialize();
      this.shipOverlays = [];
      this.healthBar = new HUDProgressBar('HULL  |----------|', 'normal 32px Courier', '#0F0');
      this.shieldBar = new HUDProgressBar('SHIELD|----------|', 'normal 32px Courier', '#00F');
      this.addChild(this.healthBar);
      this.addChild(this.shieldBar);
    }

    HUD.prototype.resize = function(width, height) {
      var _ref;
      this.width = width;
      this.height = height;
      this.healthBar.y = this.height - this.healthBar.getBounds().height - 10;
      this.shieldBar.y = this.healthBar.y - this.shieldBar.getBounds().height - 10;
      this.healthBar.x = this.width - this.healthBar.getBounds().width - 10;
      this.shieldBar.x = this.healthBar.x;
      return (_ref = this.weaponStatus) != null ? _ref.y = this.height - this.weaponStatus.getBounds().height - 10 : void 0;
    };

    HUD.prototype.update = function() {
      var i, obj, overlay, text, w, weapon, wpbar, _i, _j, _k, _l, _len, _len1, _len2, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _results,
        _this = this;
      if (this.weaponStatus == null) {
        this.weaponStatus = new createjs.Container();
        _ref = this.game.player.status.weapons;
        for (w = _i = 0, _len = _ref.length; _i < _len; w = ++_i) {
          weapon = _ref[w];
          wpbar = new HUDProgressBar("" + weapon.label + "|" + (((function() {
            var _j, _ref1, _results;
            _results = [];
            for (i = _j = 0, _ref1 = weapon.maxammo; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
              _results.push('-');
            }
            return _results;
          })()).join('')) + "|", 'normal 32px Courier', '#999');
          this.weaponStatus.addChild(wpbar);
          wpbar.y = w * (wpbar.getBounds().height + 10);
        }
        this.addChild(this.weaponStatus);
        if ((_ref1 = this.weaponStatus) != null) {
          _ref1.y = this.height - this.weaponStatus.getBounds().height - 10;
        }
        this.weaponStatus.update = function() {
          var _j, _len1, _ref2, _results;
          _ref2 = _this.game.player.status.weapons;
          _results = [];
          for (w = _j = 0, _len1 = _ref2.length; _j < _len1; w = ++_j) {
            weapon = _ref2[w];
            wpbar = _this.weaponStatus.children[w];
            wpbar.update(weapon.curammo / weapon.maxammo);
            _results.push(wpbar.color = (_this.game.player.status.curweapon === w ? '#F00' : '#999'));
          }
          return _results;
        };
      }
      this.healthBar.update(this.game.player.status.curhp / this.game.player.status.maxhp);
      if ((this.game.player.status.maxshield != null) && this.game.player.status.maxshield > 0) {
        this.shieldBar.update(this.game.player.status.shield / this.game.player.status.maxshield);
      }
      this.weaponStatus.update();
      _ref2 = this.game.gameObjects;
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        obj = _ref2[_j];
        if (!(obj.hud && !this.hasOverlay(obj))) {
          continue;
        }
        overlay = new HUDShipOverlay(obj);
        this.shipOverlays.push(overlay);
        this.addChild(overlay);
      }
      _ref3 = this.shipOverlays;
      for (_k = 0, _len2 = _ref3.length; _k < _len2; _k++) {
        text = _ref3[_k];
        text.update(this.game.levelGroup);
      }
      _results = [];
      for (i = _l = 0, _ref4 = this.shipOverlays.length; 0 <= _ref4 ? _l < _ref4 : _l > _ref4; i = 0 <= _ref4 ? ++_l : --_l) {
        if (!((_ref5 = this.shipOverlays[i]) != null ? _ref5.ship.isRemove : void 0)) {
          continue;
        }
        this.removeChild(this.shipOverlays[i]);
        _results.push(this.shipOverlays.splice(i, 1));
      }
      return _results;
    };

    HUD.prototype.hasOverlay = function(obj) {
      var overlay, _i, _len, _ref;
      _ref = this.shipOverlays;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        overlay = _ref[_i];
        if (overlay.ship === obj) {
          return true;
        }
      }
      return false;
    };

    return HUD;

  })(createjs.Container);

  HUDProgressBar = (function(_super) {
    __extends(HUDProgressBar, _super);

    function HUDProgressBar(text, style, color, label, boxes) {
      var _ref, _ref1;
      HUDProgressBar.__super__.constructor.call(this, text, style, color);
      this.initialize(text, style, color);
      this.boxes = boxes || ((_ref = text.match(/\|\-+\|/g)) != null ? _ref[0].length : void 0) - 2;
      this.label = label || ((_ref1 = text.match(/^[^-\|]+/)) != null ? _ref1[0] : void 0);
    }

    HUDProgressBar.prototype.update = function(proportion) {
      var filled, h;
      filled = Math.floor(proportion * this.boxes);
      return this.text = "" + this.label + "|" + (((function() {
        var _i, _results;
        _results = [];
        for (h = _i = 0; 0 <= filled ? _i < filled : _i > filled; h = 0 <= filled ? ++_i : --_i) {
          _results.push('#');
        }
        return _results;
      })()).join('')) + (((function() {
        var _i, _ref, _results;
        _results = [];
        for (h = _i = filled, _ref = this.boxes; filled <= _ref ? _i < _ref : _i > _ref; h = filled <= _ref ? ++_i : --_i) {
          _results.push('-');
        }
        return _results;
      }).call(this)).join('')) + "|";
    };

    return HUDProgressBar;

  })(createjs.Text);

  HUDShipOverlay = (function(_super) {
    __extends(HUDShipOverlay, _super);

    function HUDShipOverlay(ship) {
      var _ref, _ref1;
      this.ship = ship;
      this.initialize();
      this.healthBar = new HUDProgressBar('HP|-----|', 'normal 14px Courier', '#0F0');
      this.shieldBar = new HUDProgressBar('SP|-----|', 'normal 14px Courier', '#00F');
      this.healthBar.y = this.shieldBar.getBounds().height + 5;
      this.addChild(this.healthBar);
      if (((_ref = this.ship.status) != null ? _ref.maxshield : void 0) > 0) {
        this.addChild(this.shieldBar);
      }
      _ref1 = this.getBounds(), this.width = _ref1.width, this.height = _ref1.height;
    }

    HUDShipOverlay.prototype.update = function(view) {
      var _ref, _ref1, _ref2, _ref3, _ref4;
      this.healthBar.update(((_ref = this.ship.status) != null ? _ref.curhp : void 0) / ((_ref1 = this.ship.status) != null ? _ref1.maxhp : void 0));
      if (((_ref2 = this.ship.status) != null ? _ref2.maxshield : void 0) > 0) {
        this.shieldBar.update(((_ref3 = this.ship.status) != null ? _ref3.shield : void 0) / ((_ref4 = this.ship.status) != null ? _ref4.maxshield : void 0));
      }
      this.x = view.x + this.ship.x - this.width * 0.5;
      return this.y = view.y + this.ship.y + this.ship.height * 0.5;
    };

    return HUDShipOverlay;

  })(createjs.Container);

}).call(this);

/*
//@ sourceMappingURL=HUD.map
*/
