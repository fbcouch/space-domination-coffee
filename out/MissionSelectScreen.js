// Generated by CoffeeScript 1.6.3
(function() {
  var MissionSelectScreen,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.SpaceDom || (window.SpaceDom = {});

  window.SpaceDom.MissionSelectScreen = MissionSelectScreen = (function(_super) {
    __extends(MissionSelectScreen, _super);

    MissionSelectScreen.prototype._buttons = [];

    function MissionSelectScreen(preload, game) {
      var level;
      this.preload = preload;
      this.game = game;
      MissionSelectScreen.__super__.constructor.call(this, this.preload, this.game);
      this.levels = (function() {
        var _i, _len, _ref, _results;
        _ref = this.preload.getResult('missions');
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          level = _ref[_i];
          _results.push(this.preload.getResult(level));
        }
        return _results;
      }).call(this);
      this.keysDown = {};
    }

    MissionSelectScreen.prototype.show = function() {
      return MissionSelectScreen.__super__.show.call(this);
    };

    MissionSelectScreen.prototype.resize = function(width, height) {
      var btn, l, level, _i, _len, _ref, _ref1;
      this.width = width;
      this.height = height;
      MissionSelectScreen.__super__.resize.call(this, this.width, this.height);
      this.removeAllChildren();
      this._buttons = [];
      _ref = this.levels;
      for (l = _i = 0, _len = _ref.length; _i < _len; l = ++_i) {
        level = _ref[l];
        if (!(level !== null)) {
          continue;
        }
        btn = new SpaceDom.TextButton(level.title);
        btn.x = this.width * 0.5;
        btn.y = 100 * (l + 1);
        btn.action = l;
        this._buttons.push(btn);
        this.addChild(btn);
      }
      this._selected = 0;
      return (_ref1 = this._buttons[this._selected]) != null ? _ref1.select() : void 0;
    };

    MissionSelectScreen.prototype.update = function(delta, keys) {
      var child, key, val, _i, _len, _ref, _ref1, _ref2, _results;
      MissionSelectScreen.__super__.update.call(this, delta, keys);
      if ((_ref = this._buttons[this._selected]) != null) {
        _ref.deselect();
      }
      if (keys.accel && !this.keysDown.accel) {
        this._selected--;
      }
      if (keys.brake && !this.keysDown.brake) {
        this._selected++;
      }
      if (keys.fire && !this.keysDown.fire) {
        this.game.setScreen(new SpaceDom.LevelScreen(this.preload, this.game, this.preload.getResult('missions')[this._buttons[this._selected].action]));
      }
      this._selected %= this._buttons.length;
      if ((_ref1 = this._buttons[this._selected]) != null) {
        _ref1.select();
      }
      for (key in keys) {
        val = keys[key];
        this.keysDown[key] = val;
      }
      _ref2 = this.children;
      _results = [];
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        child = _ref2[_i];
        _results.push(typeof child.update === "function" ? child.update(delta, keys) : void 0);
      }
      return _results;
    };

    return MissionSelectScreen;

  })(SpaceDom.Screen);

}).call(this);

/*
//@ sourceMappingURL=MissionSelectScreen.map
*/
