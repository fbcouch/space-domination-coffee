// Generated by CoffeeScript 1.6.3
(function() {
  var KEYCODE_0, KEYCODE_A, KEYCODE_CTRL, KEYCODE_D, KEYCODE_DOWN, KEYCODE_ENTER, KEYCODE_LEFT, KEYCODE_RIGHT, KEYCODE_S, KEYCODE_SHIFT, KEYCODE_SPACE, KEYCODE_UP, KEYCODE_W, SpaceDominationGame, UpdateContainer, canvas, canvasHeight, canvasWidth, doneLoading, game, gather_images, handleKeyDown, handleKeyUp, init, keyMap, keys, messageField, preload, progressbar, root, stage, start, tick, updateLoading,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  root = this;

  SpaceDominationGame = root.SpaceDom.SpaceDominationGame;

  root.SpaceDom.DEG_TO_RAD = Math.PI / 180;

  root.SpaceDom.RAD_TO_DEG = 180 / Math.PI;

  KEYCODE_ENTER = 13;

  KEYCODE_SPACE = 32;

  KEYCODE_SHIFT = 16;

  KEYCODE_CTRL = 17;

  KEYCODE_UP = 38;

  KEYCODE_LEFT = 37;

  KEYCODE_RIGHT = 39;

  KEYCODE_DOWN = 40;

  KEYCODE_W = 87;

  KEYCODE_A = 65;

  KEYCODE_D = 68;

  KEYCODE_S = 83;

  KEYCODE_0 = 48;

  keys = {};

  keyMap = {
    accel: [KEYCODE_W, KEYCODE_UP],
    brake: [KEYCODE_S, KEYCODE_DOWN],
    left: [KEYCODE_A, KEYCODE_LEFT],
    right: [KEYCODE_D, KEYCODE_RIGHT],
    fire: [KEYCODE_SPACE],
    pause: [KEYCODE_ENTER]
  };

  canvas = {};

  stage = {};

  canvasWidth = canvasHeight = 0;

  preload = {};

  progressbar = {};

  messageField = {};

  game = {};

  init = function() {
    var manifest, other;
    console.log('game init');
    canvas = document.getElementById('gameCanvas');
    canvas.style.background = '#000';
    stage = new createjs.Stage(canvas);
    canvasWidth = canvas.width = document.documentElement.clientWidth;
    canvasHeight = canvas.height = document.documentElement.clientHeight;
    messageField = new createjs.Text('Loading', 'bold 30px sans-serif', '#CCC');
    messageField.textAlign = 'center';
    messageField.x = canvasWidth / 2;
    messageField.y = canvasHeight / 2;
    stage.addChild(messageField);
    stage.update();
    manifest = [
      {
        id: 'shiplist',
        src: 'assets/ships.json'
      }, {
        id: 'particles',
        src: 'assets/particles.json'
      }, {
        id: 'missions',
        src: 'assets/missions.json'
      }
    ];
    other = [
      {
        id: 'bg-menu',
        src: 'assets/bg-menu.png'
      }
    ];
    preload = new createjs.LoadQueue();
    preload.addEventListener('complete', function() {
      var mission, missions;
      missions = (function() {
        var _i, _len, _ref, _results;
        _ref = preload.getResult('missions');
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          mission = _ref[_i];
          _results.push({
            id: mission,
            src: "assets/missions/" + mission + ".json"
          });
        }
        return _results;
      })();
      preload.removeAllEventListeners('complete');
      preload.addEventListener('complete', function() {
        var image, images, item, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1;
        images = [];
        for (_i = 0, _len = manifest.length; _i < _len; _i++) {
          item = manifest[_i];
          _ref = gather_images(preload.getResult(item.id));
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            image = _ref[_j];
            images.push({
              id: image,
              src: "assets/" + image + ".png"
            });
          }
        }
        for (_k = 0, _len2 = missions.length; _k < _len2; _k++) {
          item = missions[_k];
          _ref1 = gather_images(preload.getResult(item.id));
          for (_l = 0, _len3 = _ref1.length; _l < _len3; _l++) {
            image = _ref1[_l];
            images.push({
              id: image,
              src: "assets/" + image + ".png"
            });
          }
        }
        for (_m = 0, _len4 = other.length; _m < _len4; _m++) {
          item = other[_m];
          images.push(item);
        }
        preload.removeAllEventListeners('complete');
        preload.addEventListener('complete', doneLoading);
        preload.addEventListener('progress', updateLoading);
        return preload.loadManifest(images);
      });
      return preload.loadManifest(missions);
    });
    preload.loadManifest(manifest);
    root.canvas = canvas;
    root.stage = stage;
    root.preload = preload;
    document.onkeydown = handleKeyDown;
    document.onkeyup = handleKeyUp;
    return window.onresize = function(event) {
      canvasWidth = canvas.width = document.documentElement.clientWidth;
      canvasHeight = canvas.height = document.documentElement.clientHeight;
      stage.update();
      return game != null ? game.resize() : void 0;
    };
  };

  gather_images = function(obj) {
    var image, images, img, key, val, _i, _j, _len, _len1, _ref;
    images = [];
    for (key in obj) {
      val = obj[key];
      if (key === 'image') {
        images.push(val);
      } else if (key === 'images') {
        for (_i = 0, _len = val.length; _i < _len; _i++) {
          img = val[_i];
          images.push(img);
        }
      } else if (typeof val === 'object') {
        _ref = gather_images(val);
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          image = _ref[_j];
          images.push(image);
        }
      }
    }
    return images;
  };

  updateLoading = function() {
    messageField.text = "Loading " + (preload.progress * 100 | 0) + "%";
    return stage.update();
  };

  doneLoading = function() {
    messageField.text = "Loading complete";
    stage.removeAllChildren();
    stage.update();
    return start();
  };

  handleKeyDown = function(e) {
    var key, _ref;
    e || (e = window.event);
    for (key in keyMap) {
      if (_ref = e.keyCode, __indexOf.call(keyMap[key], _ref) >= 0) {
        keys[key] = true;
      }
    }
    return false;
  };

  handleKeyUp = function(e) {
    var key, _ref;
    e || (e = window.event);
    for (key in keyMap) {
      if (_ref = e.keyCode, __indexOf.call(keyMap[key], _ref) >= 0) {
        keys[key] = false;
      }
    }
    return false;
  };

  start = function() {
    console.log('Start game...');
    game = new SpaceDominationGame(stage, canvas, preload);
    if (!createjs.Ticker.hasEventListener('tick')) {
      createjs.Ticker.addEventListener('tick', tick);
    }
    return createjs.Ticker.setFPS(30);
  };

  tick = function(event) {
    var delta;
    delta = event.delta / 1000;
    if (event.delta == null) {
      return;
    }
    game.update(delta, keys);
    return stage.update();
  };

  window.SpaceDom.UpdateContainer = UpdateContainer = (function(_super) {
    __extends(UpdateContainer, _super);

    function UpdateContainer() {
      UpdateContainer.__super__.constructor.call(this);
      this.initialize();
    }

    UpdateContainer.prototype.update = function(delta, keys) {
      var child, _i, _len, _ref, _results;
      _ref = this.children;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        _results.push(typeof child.update === "function" ? child.update(delta, keys) : void 0);
      }
      return _results;
    };

    return UpdateContainer;

  })(createjs.Container);

  init();

}).call(this);

/*
//@ sourceMappingURL=main.map
*/
